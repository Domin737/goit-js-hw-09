{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAGI,SAAKC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACrCC,YAAU,KACLH,EAECF,EAAK,C,SAAEH,E,MAAUC,IAGlBG,EAAK,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAiCbQ,SAASC,cAAc,SAASC,iBAAiB,UA5B9C,SAAuBC,GACxBA,EAAMC,iBAEL,MAAKC,EAAOF,EAAMG,cACbC,EAAaC,OAAOH,EAAKI,SAASC,UAAU,SAASC,OACrDC,EAAYJ,OAAOH,EAAKI,SAASC,UAAU,QAAQC,OACnDE,EAASL,OAAOH,EAAKI,SAASC,UAAU,UAAUC,OAGpD,IAAC,IAAIG,EAAI,EAAGA,GAAKD,EAAQC,IAAK,CAEhCxB,EAAcwB,EADOP,EAAaK,GAAaE,EAAI,IAEhDC,MAAK,EAACxB,SAAEA,EAAQC,MAAEA,MAEjBwB,EAAA5B,GAAS6B,OAAOC,QACd,uBAAqB3B,QAAiBC,MAAU,IAGnD2B,OAAM,EAAC5B,SAAEA,EAAQC,MAAEA,MAElBwB,EAAA5B,GAAS6B,OAAOG,QACd,sBAAoB7B,QAAiBC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\n// Funkcja tworzy obietnicę, która po określonym czasie (delay) zostanie rozwiązana lub odrzucona\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3; // 70% szans na rozwiązanie obietnicy\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Jeśli warunek spełniony, obietnica zostaje rozwiązana\n        resolve({ position, delay });\n      } else {\n        // Jeśli warunek niespełniony, obietnica zostaje odrzucona\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// Funkcja obsługująca wysłanie formularza\nfunction handleFormSubmit(event) {\n  event.preventDefault(); // Zapobiega domyślnemu zachowaniu formularza\n\n  const form = event.currentTarget; // Pobieranie aktualnego formularza\n  const firstDelay = Number(form.elements.namedItem('delay').value); // Pobranie pierwszego opóźnienia\n  const delayStep = Number(form.elements.namedItem('step').value); // Pobranie kroku opóźnienia\n  const amount = Number(form.elements.namedItem('amount').value); // Pobranie ilości obietnic\n\n  // Pętla tworząca obietnice z odpowiednim opóźnieniem i numerem\n  for (let i = 1; i <= amount; i++) {\n    const currentDelay = firstDelay + delayStep * (i - 1);\n    createPromise(i, currentDelay)\n      .then(({ position, delay }) => {\n        // Obsługa rozwiązanej obietnicy\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        // Obsługa odrzuconej obietnicy\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n}\n\n// Dodanie słuchacza zdarzeń do formularza na zdarzenie 'submit'\ndocument.querySelector('.form').addEventListener('submit', handleFormSubmit);\n"],"names":["$1GAPJ","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","event","preventDefault","form","currentTarget","firstDelay","Number","elements","namedItem","value","delayStep","amount","i","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.8b01fc0e.js.map"}